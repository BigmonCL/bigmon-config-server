name: Deploy Config Server to Production

on:
  push:
    branches:
      - main
    paths:
      - '**'
  workflow_dispatch:  # Permitir ejecución manual

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          
      - name: Run tests
        run: mvn test
        
      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'

  deploy:
    name: Deploy to Production
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Build Config Server
        run: mvn clean package -DskipTests

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_BIGMON }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.BIGMON_PROD_SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Create deployment directories
        env:
          SERVER_IP: ${{ secrets.BIGMON_PROD_SERVER_IP }}
          SERVER_USER: ${{ secrets.BIGMON_PROD_SERVER_USER }}
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          
          echo "🚀 Iniciando despliegue de Config Server v$VERSION"
          
          # Preparar directorios y backup
          ssh $SERVER_USER@$SERVER_IP "sudo mkdir -p /opt/bigmon-config-server/backups /opt/bigmon-config-server/config"
          ssh $SERVER_USER@$SERVER_IP "if [ -f /opt/bigmon-config-server/bigmon-config-server.jar ]; then sudo cp /opt/bigmon-config-server/bigmon-config-server.jar /opt/bigmon-config-server/backups/bigmon-config-server-backup-$TIMESTAMP.jar; fi"

      - name: Upload JAR file
        env:
          SERVER_IP: ${{ secrets.BIGMON_PROD_SERVER_IP }}
          SERVER_USER: ${{ secrets.BIGMON_PROD_SERVER_USER }}
        run: |
          echo "📤 Subiendo nuevo JAR..."
          scp target/bigmon-config-server-*.jar $SERVER_USER@$SERVER_IP:/opt/bigmon-config-server/bigmon-config-server.jar

      - name: Configure environment
        env:
          SERVER_IP: ${{ secrets.BIGMON_PROD_SERVER_IP }}
          SERVER_USER: ${{ secrets.BIGMON_PROD_SERVER_USER }}
          GIT_PRIVATE_KEY: ${{ secrets.GIT_PRIVATE_KEY }}
        run: |
          echo "⚙️ Configurando variables de entorno..."
          
          # Crear archivo de configuración usando echo (evitar HEREDOC)
          echo "SPRING_PROFILES_ACTIVE=prod" > temp_env
          echo "GIT_REPO_URI=git@github.com:BigmonCL/bigmon-config-repo.git" >> temp_env
          echo "GIT_DEFAULT_BRANCH=main" >> temp_env
          echo "GIT_IGNORE_LOCAL_SSH=false" >> temp_env
          echo "GIT_CLONE_ON_START=false" >> temp_env
          echo "GIT_TIMEOUT=5" >> temp_env
          echo "JAVA_OPTS=-Xmx512m -Xms256m -XX:+UseG1GC -XX:MaxGCPauseMillis=100" >> temp_env
          
          # Subir configuración
          scp temp_env $SERVER_USER@$SERVER_IP:/tmp/application.env
          ssh $SERVER_USER@$SERVER_IP "sudo mv /tmp/application.env /opt/bigmon-config-server/config/application.env && sudo chown bigmon-config:bigmon-config /opt/bigmon-config-server/config/application.env && sudo chmod 640 /opt/bigmon-config-server/config/application.env"
          rm temp_env
          
          # Configurar SSH
          ssh $SERVER_USER@$SERVER_IP "sudo mkdir -p /opt/bigmon-config-server/.ssh && sudo chown -R bigmon-config:bigmon-config /opt/bigmon-config-server/.ssh && sudo chmod 700 /opt/bigmon-config-server/.ssh"
          
          # Escribir clave SSH
          echo "$GIT_PRIVATE_KEY" | ssh $SERVER_USER@$SERVER_IP "sudo tee /opt/bigmon-config-server/.ssh/id_rsa > /dev/null && sudo chmod 600 /opt/bigmon-config-server/.ssh/id_rsa && sudo chown bigmon-config:bigmon-config /opt/bigmon-config-server/.ssh/id_rsa"

      - name: Restart service
        env:
          SERVER_IP: ${{ secrets.BIGMON_PROD_SERVER_IP }}
          SERVER_USER: ${{ secrets.BIGMON_PROD_SERVER_USER }}
        run: |
          echo "🔄 Reiniciando servicio..."
          ssh $SERVER_USER@$SERVER_IP "sudo systemctl daemon-reload"
          ssh $SERVER_USER@$SERVER_IP "sudo systemctl restart bigmon-config-server"
          
          # Esperar que el servicio esté activo
          echo "⏳ Esperando que el servicio esté listo..."
          for i in {1..30}; do
            if ssh $SERVER_USER@$SERVER_IP "sudo systemctl is-active --quiet bigmon-config-server"; then
              echo "✅ Servicio activo"
              break
            fi
            echo "   Intento $i/30..."
            sleep 2
          done
          
          # Verificar estado del servicio
          echo "📊 Estado del servicio:"
          ssh $SERVER_USER@$SERVER_IP "sudo systemctl status bigmon-config-server --no-pager -l"

      - name: Health check
        env:
          SERVER_IP: ${{ secrets.BIGMON_PROD_SERVER_IP }}
          SERVER_USER: ${{ secrets.BIGMON_PROD_SERVER_USER }}
        run: |
          echo "🏥 Ejecutando health check..."
          
          # Esperar que la aplicación esté disponible
          for i in {1..20}; do
            if ssh $SERVER_USER@$SERVER_IP "curl -f http://localhost:8888/actuator/health >/dev/null 2>&1"; then
              echo "✅ Health check exitoso"
              ssh $SERVER_USER@$SERVER_IP "curl -s http://localhost:8888/actuator/health"
              echo "🎉 Despliegue completado exitosamente"
              exit 0
            fi
            echo "   Health check intento $i/20..."
            sleep 10
          done
          
          echo "❌ Health check falló"
          echo "📋 Logs del servicio:"
          ssh $SERVER_USER@$SERVER_IP "sudo journalctl -u bigmon-config-server --no-pager -n 50"
          exit 1