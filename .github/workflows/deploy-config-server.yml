name: Deploy Config Server to Production

on:
  push:
    branches:
      - main
    paths:
      - '**'
  workflow_dispatch:  # Permitir ejecuci√≥n manual

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          
      - name: Run tests
        run: mvn test
        
      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'

  deploy:
    name: Deploy to Production
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Build Config Server
        run: mvn clean package -DskipTests

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_BIGMON }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.BIGMON_PROD_SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy application
        env:
          SERVER_IP: ${{ secrets.BIGMON_PROD_SERVER_IP }}
          SERVER_USER: ${{ secrets.BIGMON_PROD_SERVER_USER }}
          GIT_PRIVATE_KEY: ${{ secrets.GIT_PRIVATE_KEY }}
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          BACKUP_DIR="/opt/bigmon-config-server/backups"
          DEPLOY_DIR="/opt/bigmon-config-server"
          SERVICE_NAME="bigmon-config-server"
          
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          
          echo "üöÄ Iniciando despliegue de Config Server v$VERSION"
          
          # Crear estructura de directorios y hacer backup
          ssh $SERVER_USER@$SERVER_IP <<EOF
            echo "üìÅ Preparando directorios..."
            sudo mkdir -p $BACKUP_DIR $DEPLOY_DIR/config
            
            # Backup del JAR actual
            if [ -f $DEPLOY_DIR/bigmon-config-server.jar ]; then
              echo "üíæ Creando backup..."
              sudo cp $DEPLOY_DIR/bigmon-config-server.jar $BACKUP_DIR/bigmon-config-server-backup-$TIMESTAMP.jar
            fi
            
            # Verificar que el servicio existe
            if ! systemctl list-unit-files | grep -q $SERVICE_NAME; then
              echo "‚ùå Servicio $SERVICE_NAME no encontrado"
              exit 1
            fi
          EOF
          
          # Subir nuevo JAR
          echo "üì§ Subiendo nuevo JAR..."
          scp target/bigmon-config-server-*.jar $SERVER_USER@$SERVER_IP:$DEPLOY_DIR/bigmon-config-server.jar
          
          # Configurar variables de entorno en el servidor
          ssh $SERVER_USER@$SERVER_IP <<EOF
            echo "‚öôÔ∏è Configurando variables de entorno..."
            
            # Crear archivo de configuraci√≥n de entorno
            sudo tee /opt/bigmon-config-server/config/application.env > /dev/null <<ENVEOF
SPRING_PROFILES_ACTIVE=prod
GIT_REPO_URI=git@github.com:BigmonCL/bigmon-config-repo.git
GIT_DEFAULT_BRANCH=main
GIT_IGNORE_LOCAL_SSH=false
GIT_CLONE_ON_START=false
GIT_TIMEOUT=5
JAVA_OPTS=-Xmx512m -Xms256m -XX:+UseG1GC -XX:MaxGCPauseMillis=100
ENVEOF

            # Crear clave SSH si no existe
            if [ ! -f /opt/bigmon-config-server/.ssh/id_rsa ]; then
              echo "üîë Configurando clave SSH..."
              sudo mkdir -p /opt/bigmon-config-server/.ssh
              echo '$GIT_PRIVATE_KEY' | sudo tee /opt/bigmon-config-server/.ssh/id_rsa > /dev/null
              sudo chmod 600 /opt/bigmon-config-server/.ssh/id_rsa
              sudo chown -R bigmon-config:bigmon-config /opt/bigmon-config-server/.ssh
            fi
          EOF

      - name: Restart and verify service
        env:
          SERVER_IP: ${{ secrets.BIGMON_PROD_SERVER_IP }}
          SERVER_USER: ${{ secrets.BIGMON_PROD_SERVER_USER }}
        run: |
          SERVICE_NAME="bigmon-config-server"
          
          ssh $SERVER_USER@$SERVER_IP <<EOF
            echo "üîÑ Reiniciando servicio..."
            sudo systemctl daemon-reload
            sudo systemctl restart $SERVICE_NAME
            
            # Esperar que el servicio est√© activo
            echo "‚è≥ Esperando que el servicio est√© listo..."
            for i in {1..30}; do
              if sudo systemctl is-active --quiet $SERVICE_NAME; then
                echo "‚úÖ Servicio activo"
                break
              fi
              echo "   Intento \$i/30..."
              sleep 2
            done
            
            # Verificar estado del servicio
            echo "üìä Estado del servicio:"
            sudo systemctl status $SERVICE_NAME --no-pager -l
          EOF

      - name: Health check
        env:
          SERVER_IP: ${{ secrets.BIGMON_PROD_SERVER_IP }}
          SERVER_USER: ${{ secrets.BIGMON_PROD_SERVER_USER }}
        run: |
          echo "üè• Ejecutando health check..."
          
          ssh $SERVER_USER@$SERVER_IP <<EOF
            # Esperar que la aplicaci√≥n est√© disponible
            for i in {1..20}; do
              if curl -f http://localhost:8888/actuator/health >/dev/null 2>&1; then
                echo "‚úÖ Health check exitoso"
                curl -s http://localhost:8888/actuator/health | jq '.'
                exit 0
              fi
              echo "   Health check intento \$i/20..."
              sleep 10
            done
            
            echo "‚ùå Health check fall√≥"
            echo "üìã Logs del servicio:"
            sudo journalctl -u $SERVICE_NAME --no-pager -n 50
            exit 1
          EOF
          
          echo "üéâ Despliegue completado exitosamente"